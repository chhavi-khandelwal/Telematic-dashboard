{"ast":null,"code":"var _jsxFileName = \"/Users/chhavikhandelwal/Desktop/Test/Flexcavo/telematic-dashboard/src/store/machine/client.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addAlertedMachines, updateMachines } from './machine.actions';\nimport { ALERT } from 'constants/enum';\nimport { getAlertedMachines } from './machine.selectors';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst setAlert = mc => {\n  const idleHours = mc.cumulativeIdleHours.hour;\n  const operatingHours = mc.cumulativeOperatingHours.hour;\n  console.log(operatingHours / idleHours);\n\n  if (operatingHours / idleHours < 3) {\n    mc.alert = ALERT.IDLE;\n    return mc;\n  }\n\n  const fuelRemaining = mc.fuelRemaining.percent;\n\n  if (fuelRemaining < 5) {\n    mc.alert = ALERT.FUEL_LIMIT;\n    return mc;\n  }\n\n  if (idleHours < 5 || operatingHours < 5) {\n    mc.alert = ALERT.WEEKEND_OFF;\n    return mc;\n  }\n\n  const engineStatus = mc.engineStatus.running;\n\n  if (!engineStatus) {\n    mc.alert = ALERT.ENGINE_FAILED;\n    return mc;\n  }\n\n  return mc;\n};\n\nexport const WebSocketProvider = ({\n  socket,\n  children\n}) => {\n  _s();\n\n  const WebSocketContext = /*#__PURE__*/createContext(null);\n  let ws;\n  const dispatch = useDispatch();\n  const alertedMachines = useSelector(getAlertedMachines);\n  useEffect(() => {\n    if (!socket) {\n      //@ts-ignore\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      socket = io('http://localhost:5000'); // console.log('++', alertedMachines, socket);\n\n      socket.on('machineUpdater', data => {\n        // console.log('++');\n        dispatch(addAlertedMachines([setAlert(data[0])]));\n        dispatch(updateMachines(data));\n      }); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n      ws = {\n        socket: socket.current\n      };\n    }\n\n    return () => socket.disconnect();\n  }, [socket]);\n  return /*#__PURE__*/_jsxDEV(WebSocketContext.Provider, {\n    value: ws,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n\n_s(WebSocketProvider, \"YbzNiBzGX9/CzNQcan218srjUUo=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = WebSocketProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"WebSocketProvider\");","map":{"version":3,"sources":["/Users/chhavikhandelwal/Desktop/Test/Flexcavo/telematic-dashboard/src/store/machine/client.tsx"],"names":["React","createContext","useEffect","io","useDispatch","useSelector","addAlertedMachines","updateMachines","ALERT","getAlertedMachines","setAlert","mc","idleHours","cumulativeIdleHours","hour","operatingHours","cumulativeOperatingHours","console","log","alert","IDLE","fuelRemaining","percent","FUEL_LIMIT","WEEKEND_OFF","engineStatus","running","ENGINE_FAILED","WebSocketProvider","socket","children","WebSocketContext","ws","dispatch","alertedMachines","on","data","current","disconnect"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,SAA/B,QAAwD,OAAxD;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,kBAAT,EAA6BC,cAA7B,QAAmD,mBAAnD;AAEA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,kBAAT,QAAmC,qBAAnC;;;AAEA,MAAMC,QAAQ,GAAIC,EAAD,IAAuB;AACtC,QAAMC,SAAS,GAAGD,EAAE,CAACE,mBAAH,CAAuBC,IAAzC;AACA,QAAMC,cAAc,GAAGJ,EAAE,CAACK,wBAAH,CAA4BF,IAAnD;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYH,cAAc,GAAGH,SAA7B;;AACA,MAAIG,cAAc,GAAGH,SAAjB,GAA6B,CAAjC,EAAoC;AAClCD,IAAAA,EAAE,CAACQ,KAAH,GAAWX,KAAK,CAACY,IAAjB;AACA,WAAOT,EAAP;AACD;;AACD,QAAMU,aAAa,GAAGV,EAAE,CAACU,aAAH,CAAiBC,OAAvC;;AAEA,MAAID,aAAa,GAAG,CAApB,EAAuB;AACrBV,IAAAA,EAAE,CAACQ,KAAH,GAAWX,KAAK,CAACe,UAAjB;AACA,WAAOZ,EAAP;AACD;;AAED,MAAIC,SAAS,GAAG,CAAZ,IAAiBG,cAAc,GAAG,CAAtC,EAAyC;AACvCJ,IAAAA,EAAE,CAACQ,KAAH,GAAWX,KAAK,CAACgB,WAAjB;AACA,WAAOb,EAAP;AACD;;AACD,QAAMc,YAAY,GAAGd,EAAE,CAACc,YAAH,CAAgBC,OAArC;;AAEA,MAAI,CAACD,YAAL,EAAmB;AACjBd,IAAAA,EAAE,CAACQ,KAAH,GAAWX,KAAK,CAACmB,aAAjB;AACA,WAAOhB,EAAP;AACD;;AACD,SAAOA,EAAP;AACD,CA1BD;;AA4BA,OAAO,MAAMiB,iBAAiB,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAD,KAA+B;AAAA;;AAC9D,QAAMC,gBAAgB,gBAAG9B,aAAa,CAAM,IAAN,CAAtC;AACA,MAAI+B,EAAJ;AAEA,QAAMC,QAAQ,GAAG7B,WAAW,EAA5B;AACA,QAAM8B,eAAe,GAAG7B,WAAW,CAACI,kBAAD,CAAnC;AAEAP,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAAC2B,MAAL,EAAa;AACX;AACA;AACAA,MAAAA,MAAM,GAAG1B,EAAE,CAAC,uBAAD,CAAX,CAHW,CAIX;;AAEA0B,MAAAA,MAAM,CAACM,EAAP,CAAU,gBAAV,EAA6BC,IAAD,IAA2B;AACrD;AAEAH,QAAAA,QAAQ,CAAC3B,kBAAkB,CAAC,CAACI,QAAQ,CAAC0B,IAAI,CAAC,CAAD,CAAL,CAAT,CAAD,CAAnB,CAAR;AACAH,QAAAA,QAAQ,CAAC1B,cAAc,CAAC6B,IAAD,CAAf,CAAR;AACD,OALD,EANW,CAaX;;AACAJ,MAAAA,EAAE,GAAG;AACHH,QAAAA,MAAM,EAAEA,MAAM,CAACQ;AADZ,OAAL;AAGD;;AACD,WAAO,MAAMR,MAAM,CAACS,UAAP,EAAb;AACD,GApBQ,EAoBN,CAACT,MAAD,CApBM,CAAT;AAsBA,sBACE,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAEG,EAAlC;AAAA,cAAuCF;AAAvC;AAAA;AAAA;AAAA;AAAA,UADF;AAGD,CAhCM;;GAAMF,iB;UAIMxB,W,EACOC,W;;;KALbuB,iB","sourcesContent":["import React, { createContext, useEffect, useRef } from 'react';\nimport io from 'socket.io-client';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addAlertedMachines, updateMachines } from './machine.actions';\nimport { MachineConfig } from './machine.types';\nimport { ALERT } from 'constants/enum';\nimport { getAlertedMachines } from './machine.selectors';\n\nconst setAlert = (mc: MachineConfig) => {\n  const idleHours = mc.cumulativeIdleHours.hour;\n  const operatingHours = mc.cumulativeOperatingHours.hour;\n  console.log(operatingHours / idleHours);\n  if (operatingHours / idleHours < 3) {\n    mc.alert = ALERT.IDLE;\n    return mc;\n  }\n  const fuelRemaining = mc.fuelRemaining.percent;\n\n  if (fuelRemaining < 5) {\n    mc.alert = ALERT.FUEL_LIMIT;\n    return mc;\n  }\n\n  if (idleHours < 5 || operatingHours < 5) {\n    mc.alert = ALERT.WEEKEND_OFF;\n    return mc;\n  }\n  const engineStatus = mc.engineStatus.running;\n\n  if (!engineStatus) {\n    mc.alert = ALERT.ENGINE_FAILED;\n    return mc;\n  }\n  return mc;\n};\n\nexport const WebSocketProvider = ({ socket, children }: any) => {\n  const WebSocketContext = createContext<any>(null);\n  let ws;\n\n  const dispatch = useDispatch();\n  const alertedMachines = useSelector(getAlertedMachines);\n\n  useEffect(() => {\n    if (!socket) {\n      //@ts-ignore\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      socket = io('http://localhost:5000');\n      // console.log('++', alertedMachines, socket);\n\n      socket.on('machineUpdater', (data: MachineConfig[]) => {\n        // console.log('++');\n\n        dispatch(addAlertedMachines([setAlert(data[0])]));\n        dispatch(updateMachines(data));\n      });\n\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ws = {\n        socket: socket.current,\n      };\n    }\n    return () => socket.disconnect();\n  }, [socket]);\n\n  return (\n    <WebSocketContext.Provider value={ws}>{children}</WebSocketContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}