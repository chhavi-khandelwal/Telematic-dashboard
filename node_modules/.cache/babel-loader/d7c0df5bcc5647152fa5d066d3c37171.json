{"ast":null,"code":"var _jsxFileName = \"/Users/chhavikhandelwal/Desktop/Test/Flexcavo/telematic-dashboard/src/components/Tile.tsx\",\n    _s = $RefreshSig$();\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getMachineConfig, getMachines } from 'store/machine/machine.selectors';\nimport Table from 'components/Table';\nimport { useEffect, useState } from 'react';\nimport Modal from './Modal';\nimport styled from 'styled-components';\nimport { updateMachineConfig } from 'store/machine/machine.actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Tile = () => {\n  _s();\n\n  const [showAlert, setShowAlert] = useState(false);\n  const [pageNumber, setPageNumber] = useState(1);\n  const [alertedMachines, setAlertedMachines] = useState([]);\n  const machineConfig = useSelector(getMachineConfig);\n  const machines = useSelector(getMachines);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    debugger;\n\n    if (machineConfig && !showAlert && !alertedMachines.length) {\n      const alertedMachine = machineConfig.filter(mc => {\n        const idleHours = mc.cumulativeIdleHours.hour;\n        const operatingHours = mc.cumulativeOperatingHours.hour;\n        console.log(operatingHours / idleHours);\n\n        if (operatingHours / idleHours < 3) {\n          return mc;\n        }\n\n        return false;\n      });\n\n      if (alertedMachine.length) {\n        setAlertedMachines(alertedMachine);\n        setShowAlert(true);\n      }\n    }\n  }, [machineConfig, showAlert, alertedMachines]);\n  console.log(showAlert, alertedMachines, machineConfig);\n  useEffect(() => {\n    debugger;\n\n    if (!showAlert && alertedMachines.length) {\n      setAlertedMachines([]);\n      dispatch(updateMachineConfig([]));\n    }\n  }, [showAlert, alertedMachines]);\n  return /*#__PURE__*/_jsxDEV(Styled.Dashboard, {\n    children: [showAlert && (alertedMachines === null || alertedMachines === void 0 ? void 0 : alertedMachines.length) && /*#__PURE__*/_jsxDEV(Modal, {\n      onClose: () => {\n        setShowAlert(false);\n      },\n      children: /*#__PURE__*/_jsxDEV(Styled.Container, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      data: machines,\n      setPageNumber: setPageNumber\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Tile, \"tQ3U7D8S4N5ihFA1raBpHykTTlU=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = Tile;\nconst Styled = {\n  Dashboard: styled.div`\n    padding: ${props => props.theme.spacings.xl};\n  `,\n  Container: styled.div`\n    background-color: ${props => props.theme.colors.white};\n    display: flex;\n    align-items: flex-start;\n    justify-content: center;\n    flex-direction: column;\n  `\n};\nexport default Tile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tile\");","map":{"version":3,"sources":["/Users/chhavikhandelwal/Desktop/Test/Flexcavo/telematic-dashboard/src/components/Tile.tsx"],"names":["useDispatch","useSelector","getMachineConfig","getMachines","Table","useEffect","useState","Modal","styled","updateMachineConfig","Tile","showAlert","setShowAlert","pageNumber","setPageNumber","alertedMachines","setAlertedMachines","machineConfig","machines","dispatch","length","alertedMachine","filter","mc","idleHours","cumulativeIdleHours","hour","operatingHours","cumulativeOperatingHours","console","log","Styled","Dashboard","div","props","theme","spacings","xl","Container","colors","white"],"mappings":"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","sourcesContent":["import { useDispatch, useSelector } from 'react-redux';\nimport { getMachineConfig, getMachines } from 'store/machine/machine.selectors';\nimport Table from 'components/Table';\nimport { useEffect, useState } from 'react';\nimport Modal from './Modal';\nimport styled from 'styled-components';\nimport { MachineConfig } from 'store/machine/machine.types';\nimport { updateMachineConfig } from 'store/machine/machine.actions';\n\nconst Tile = () => {\n  const [showAlert, setShowAlert] = useState<boolean>(false);\n  const [pageNumber, setPageNumber] = useState<number>(1);\n  const [alertedMachines, setAlertedMachines] = useState<MachineConfig[]>([]);\n  const machineConfig = useSelector(getMachineConfig);\n  const machines = useSelector(getMachines);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    debugger;\n    if (machineConfig && !showAlert && !alertedMachines.length) {\n      const alertedMachine = machineConfig.filter((mc) => {\n        const idleHours = mc.cumulativeIdleHours.hour;\n        const operatingHours = mc.cumulativeOperatingHours.hour;\n        console.log(operatingHours / idleHours);\n        if (operatingHours / idleHours < 3) {\n          return mc;\n        }\n        return false;\n      });\n      if (alertedMachine.length) {\n        setAlertedMachines(alertedMachine);\n        setShowAlert(true);\n      }\n    }\n  }, [machineConfig, showAlert, alertedMachines]);\n\n  console.log(showAlert, alertedMachines, machineConfig);\n\n  useEffect(() => {\n    debugger;\n    if (!showAlert && alertedMachines.length) {\n      setAlertedMachines([]);\n      dispatch(updateMachineConfig([]));\n    }\n  }, [showAlert, alertedMachines]);\n\n  return (\n    <Styled.Dashboard>\n      {showAlert && alertedMachines?.length && (\n        <Modal\n          onClose={() => {\n            setShowAlert(false);\n          }}\n        >\n          <Styled.Container></Styled.Container>\n        </Modal>\n      )}\n      <Table data={machines} setPageNumber={setPageNumber} />\n    </Styled.Dashboard>\n  );\n};\n\nconst Styled = {\n  Dashboard: styled.div`\n    padding: ${(props) => props.theme.spacings.xl};\n  `,\n  Container: styled.div`\n    background-color: ${(props) => props.theme.colors.white};\n    display: flex;\n    align-items: flex-start;\n    justify-content: center;\n    flex-direction: column;\n  `,\n};\n\nexport default Tile;\n"]},"metadata":{},"sourceType":"module"}