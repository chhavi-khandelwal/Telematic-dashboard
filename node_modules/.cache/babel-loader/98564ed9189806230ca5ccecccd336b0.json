{"ast":null,"code":"/**\n * Factory function to easily create a thunk\n * @param factory typescript-fsa action creator factory\n * @returns an function that takes\n *  - the `type` of the action,\n *  - the your worker thunk function\n * And returns object with the async actions and the thunk itself\n */\nexport var asyncFactory = function asyncFactory(factory, resolve) {\n  if (resolve === void 0) {\n    resolve = Promise.resolve.bind(Promise);\n  }\n\n  return function (type, worker, commonMeta) {\n    var async = factory.async(type, commonMeta);\n\n    var fn = function fn(params) {\n      return function (dispatch, getState, extraArgument) {\n        return resolve().then(function () {\n          dispatch(async.started(params));\n        }).then(function () {\n          return worker(params, dispatch, getState, extraArgument);\n        }).then(function (result) {\n          dispatch(async.done({\n            params: params,\n            result: result\n          }));\n          return result;\n        }, function (error) {\n          dispatch(async.failed({\n            params: params,\n            error: error\n          }));\n          throw error;\n        });\n      };\n    };\n\n    fn.action = function (params) {\n      return fn(params);\n    };\n\n    fn.async = async;\n    return fn;\n  };\n};\n/**\n * Passing the result of this to bindActionCreators and then calling the result\n * is equivalent to calling `store.dispatch(thunkCreator(params))`. Useful\n * for when you pass it to `connect()` in an action creators map object.\n * @param thunkCreator The thunk action creator\n * @returns thunkAction as if it was bound\n */\n\nexport function thunkToAction(thunkCreator) {\n  return thunkCreator;\n}\nexport default asyncFactory;","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"AAuDA;;;;;;;AAOG;AACH,OAAO,IAAM,YAAY,GAAG,SAAf,YAAe,CAC1B,OAD0B,EAE1B,OAF0B,EAEkC;AAA5D,MAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAA+B,OAAO,CAAC,OAAR,CAAgB,IAAhB,CAAqB,OAArB,CAA/B;AAA4D;;AACzD,SAAA,UACH,IADG,EAEH,MAFG,EAGH,UAHG,EAGc;AASjB,QAAM,KAAK,GAAG,OAAO,CAAC,KAAR,CACZ,IADY,EAEZ,UAFY,CAAd;;AAIA,QAAM,EAAE,GAAc,SAAhB,EAAgB,CAAC,MAAD,EAAO;AAAK,aAAA,UAAC,QAAD,EAAW,QAAX,EAAqB,aAArB,EAAkC;AAClE,eAAA,OAAO,GACJ,IADH,CACQ,YAAA;AACJ,UAAA,QAAQ,CAAC,KAAK,CAAC,OAAN,CAAc,MAAd,CAAD,CAAR;AACD,SAHH,EAIG,IAJH,CAIQ,YAAA;AAAM,iBAAA,MAAM,CAAC,MAAD,EAAS,QAAT,EAAmB,QAAnB,EAAN,aAAM,CAAN;AAAiD,SAJ/D,EAKG,IALH,CAMI,UAAC,MAAD,EAAO;AACL,UAAA,QAAQ,CAAC,KAAK,CAAC,IAAN,CAAW;AAAE,YAAA,MAAM,EAAA,MAAR;AAAU,YAAA,MAAM,EAAA;AAAhB,WAAX,CAAD,CAAR;AACA,iBAAO,MAAP;AACD,SATL,EAUI,UAAC,KAAD,EAAM;AACJ,UAAA,QAAQ,CAAC,KAAK,CAAC,MAAN,CAAa;AAAE,YAAA,MAAM,EAAA,MAAR;AAAU,YAAA,KAAK,EAAA;AAAf,WAAb,CAAD,CAAR;AACA,gBAAM,KAAN;AACD,SAbL,CAAA;AADgC,OAAA;AAe7B,KAfL;;AAgBA,IAAA,EAAE,CAAC,MAAH,GAAY,UAAC,MAAD,EAAO;AAAK,aAAA,EAAE,CAAF,MAAE,CAAF;AAAU,KAAlC;;AACA,IAAA,EAAE,CAAC,KAAH,GAAW,KAAX;AACA,WAAQ,EAAR;AAOD,GAzCI;AAyCJ,CA5CM;AA0FP;;;;;;AAMG;;AACH,OAAM,SAAU,aAAV,CACJ,YADI,EACoD;AAExD,SAAQ,YAAR;AACD;AAED,eAAe,YAAf","sourceRoot":"","sourcesContent":["/**\n * Factory function to easily create a thunk\n * @param factory typescript-fsa action creator factory\n * @returns an function that takes\n *  - the `type` of the action,\n *  - the your worker thunk function\n * And returns object with the async actions and the thunk itself\n */\nexport var asyncFactory = function (factory, resolve) {\n    if (resolve === void 0) { resolve = Promise.resolve.bind(Promise); }\n    return function (type, worker, commonMeta) {\n        var async = factory.async(type, commonMeta);\n        var fn = function (params) { return function (dispatch, getState, extraArgument) {\n            return resolve()\n                .then(function () {\n                dispatch(async.started(params));\n            })\n                .then(function () { return worker(params, dispatch, getState, extraArgument); })\n                .then(function (result) {\n                dispatch(async.done({ params: params, result: result }));\n                return result;\n            }, function (error) {\n                dispatch(async.failed({ params: params, error: error }));\n                throw error;\n            });\n        }; };\n        fn.action = function (params) { return fn(params); };\n        fn.async = async;\n        return fn;\n    };\n};\n/**\n * Passing the result of this to bindActionCreators and then calling the result\n * is equivalent to calling `store.dispatch(thunkCreator(params))`. Useful\n * for when you pass it to `connect()` in an action creators map object.\n * @param thunkCreator The thunk action creator\n * @returns thunkAction as if it was bound\n */\nexport function thunkToAction(thunkCreator) {\n    return thunkCreator;\n}\nexport default asyncFactory;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}