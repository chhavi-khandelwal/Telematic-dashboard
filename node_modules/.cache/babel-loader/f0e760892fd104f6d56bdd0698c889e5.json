{"ast":null,"code":"import React,{createContext}from'react';import io from'socket.io-client';import{useDispatch}from'react-redux';import{updateMachineConfig}from'./machine.actions';import{jsx as _jsx}from\"react/jsx-runtime\";export var WebSocketProvider=function WebSocketProvider(_ref){var children=_ref.children;var WebSocketContext=/*#__PURE__*/createContext(null);var socket=null;var ws;var dispatch=useDispatch();if(!socket){//@ts-ignore\nsocket=io.connect('http://localhost:5000');socket.on('machineUpdater',function(data){dispatch(updateMachineConfig(data));});ws={socket:socket};}return/*#__PURE__*/_jsx(WebSocketContext.Provider,{value:ws,children:children});};","map":{"version":3,"sources":["/Users/chhavikhandelwal/Desktop/Test/Flexcavo/telematic-dashboard/src/store/machine/client.tsx"],"names":["React","createContext","io","useDispatch","updateMachineConfig","WebSocketProvider","children","WebSocketContext","socket","ws","dispatch","connect","on","data"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,aAAhB,KAAqC,OAArC,CACA,MAAOC,CAAAA,EAAP,KAAe,kBAAf,CACA,OAASC,WAAT,KAA4B,aAA5B,CACA,OAASC,mBAAT,KAAoC,mBAApC,C,2CAGA,MAAO,IAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,MAAuB,IAApBC,CAAAA,QAAoB,MAApBA,QAAoB,CACtD,GAAMC,CAAAA,gBAAgB,cAAGN,aAAa,CAAM,IAAN,CAAtC,CACA,GAAIO,CAAAA,MAAW,CAAG,IAAlB,CACA,GAAIC,CAAAA,EAAJ,CAEA,GAAMC,CAAAA,QAAQ,CAAGP,WAAW,EAA5B,CAEA,GAAI,CAACK,MAAL,CAAa,CACX;AACAA,MAAM,CAAGN,EAAE,CAACS,OAAH,CAAW,uBAAX,CAAT,CAEAH,MAAM,CAACI,EAAP,CAAU,gBAAV,CAA4B,SAACC,IAAD,CAAyB,CACnDH,QAAQ,CAACN,mBAAmB,CAACS,IAAD,CAApB,CAAR,CACD,CAFD,EAIAJ,EAAE,CAAG,CACHD,MAAM,CAAEA,MADL,CAAL,CAGD,CACD,mBACE,KAAC,gBAAD,CAAkB,QAAlB,EAA2B,KAAK,CAAEC,EAAlC,UAAuCH,QAAvC,EADF,CAGD,CAtBM","sourcesContent":["import React, { createContext } from 'react';\nimport io from 'socket.io-client';\nimport { useDispatch } from 'react-redux';\nimport { updateMachineConfig } from './machine.actions';\nimport { MachineConfig } from './machine.types';\n\nexport const WebSocketProvider = ({ children }: any) => {\n  const WebSocketContext = createContext<any>(null);\n  let socket: any = null;\n  let ws;\n\n  const dispatch = useDispatch();\n\n  if (!socket) {\n    //@ts-ignore\n    socket = io.connect('http://localhost:5000');\n\n    socket.on('machineUpdater', (data: MachineConfig) => {\n      dispatch(updateMachineConfig(data));\n    });\n\n    ws = {\n      socket: socket,\n    };\n  }\n  return (\n    <WebSocketContext.Provider value={ws}>{children}</WebSocketContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}