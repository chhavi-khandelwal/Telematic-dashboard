{"ast":null,"code":"import { createSelector } from 'reselect';\nexport const projectsState = state => {\n  return state && state.projectsApp;\n};\nexport const getProjects = createSelector(projectsState, projects => projects.projects);\nexport const getLoadingState = createSelector(projectsState, projects => projects.loading);\nexport const getShowDrawer = createSelector(projectsState, projects => projects.showDrawer);\nexport const getShowSlideOutAnim = createSelector(projectsState, projects => projects.showSlideOutAnim);\nexport const getPageNumber = createSelector(projectsState, projects => projects.pageNumber);\nexport const getCurrentProject = createSelector(projectsState, projects => projects.currentProject);\nexport const getProjectLoadingState = createSelector(projectsState, projects => projects.projectLoading);","map":{"version":3,"sources":["/Users/chhavikhandelwal/Desktop/Test/Flexcavo/telematic-dashboard/src/store/projects/projects.selectors.ts"],"names":["createSelector","projectsState","state","projectsApp","getProjects","projects","getLoadingState","loading","getShowDrawer","showDrawer","getShowSlideOutAnim","showSlideOutAnim","getPageNumber","pageNumber","getCurrentProject","currentProject","getProjectLoadingState","projectLoading"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B;AAGA,OAAO,MAAMC,aAAa,GAAIC,KAAD,IAAmC;AAC9D,SAAOA,KAAK,IAAIA,KAAK,CAACC,WAAtB;AACD,CAFM;AAIP,OAAO,MAAMC,WAAW,GAAGJ,cAAc,CACvCC,aADuC,EAEtCI,QAAD,IAAcA,QAAQ,CAACA,QAFgB,CAAlC;AAIP,OAAO,MAAMC,eAAe,GAAGN,cAAc,CAC3CC,aAD2C,EAE1CI,QAAD,IAAcA,QAAQ,CAACE,OAFoB,CAAtC;AAIP,OAAO,MAAMC,aAAa,GAAGR,cAAc,CACzCC,aADyC,EAExCI,QAAD,IAAcA,QAAQ,CAACI,UAFkB,CAApC;AAIP,OAAO,MAAMC,mBAAmB,GAAGV,cAAc,CAC/CC,aAD+C,EAE9CI,QAAD,IAAcA,QAAQ,CAACM,gBAFwB,CAA1C;AAIP,OAAO,MAAMC,aAAa,GAAGZ,cAAc,CACzCC,aADyC,EAExCI,QAAD,IAAcA,QAAQ,CAACQ,UAFkB,CAApC;AAIP,OAAO,MAAMC,iBAAiB,GAAGd,cAAc,CAC7CC,aAD6C,EAE5CI,QAAD,IAAcA,QAAQ,CAACU,cAFsB,CAAxC;AAIP,OAAO,MAAMC,sBAAsB,GAAGhB,cAAc,CAClDC,aADkD,EAEjDI,QAAD,IAAcA,QAAQ,CAACY,cAF2B,CAA7C","sourcesContent":["import { createSelector } from 'reselect';\nimport { State } from './projects.types';\n\nexport const projectsState = (state: { projectsApp: State }) => {\n  return state && state.projectsApp;\n};\n\nexport const getProjects = createSelector(\n  projectsState,\n  (projects) => projects.projects\n);\nexport const getLoadingState = createSelector(\n  projectsState,\n  (projects) => projects.loading\n);\nexport const getShowDrawer = createSelector(\n  projectsState,\n  (projects) => projects.showDrawer\n);\nexport const getShowSlideOutAnim = createSelector(\n  projectsState,\n  (projects) => projects.showSlideOutAnim\n);\nexport const getPageNumber = createSelector(\n  projectsState,\n  (projects) => projects.pageNumber\n);\nexport const getCurrentProject = createSelector(\n  projectsState,\n  (projects) => projects.currentProject\n);\nexport const getProjectLoadingState = createSelector(\n  projectsState,\n  (projects) => projects.projectLoading\n);\n"]},"metadata":{},"sourceType":"module"}