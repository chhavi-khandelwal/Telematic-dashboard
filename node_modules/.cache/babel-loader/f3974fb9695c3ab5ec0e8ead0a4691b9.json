{"ast":null,"code":"import { isType } from 'typescript-fsa';\nimport { data } from './data';\nimport * as actions from './machine.actions';\nexport const INITIAL_STATE = {\n  config: [],\n  machines: data,\n  alertedMachines: []\n};\nexport const machineReducer = (state = INITIAL_STATE, action) => {\n  if (isType(action, actions.updateMachineConfig)) {\n    return { ...state,\n      config: action.payload\n    };\n  }\n\n  if (isType(action, actions.updateAlertedMachines)) {\n    return { ...state,\n      alertedMachines: [...state.alertedMachines.map(machine => {\n        if (machine.id === action.payload[0].id) {\n          return action.payload[0];\n        }\n\n        return machine;\n      })]\n    };\n  }\n\n  if (isType(action, actions.removeAlertedMachines)) {\n    return { ...state,\n      alertedMachines: []\n    };\n  }\n\n  if (isType(action, actions.addAlertedMachines)) {\n    return { ...state,\n      alertedMachines: [...state.alertedMachines, ...action.payload]\n    };\n  }\n\n  if (isType(action, actions.updateMachines)) {\n    return { ...state,\n      machines: [...state.machines.map(machine => {\n        if (machine.id === action.payload[0].id) {\n          return action.payload[0];\n        }\n\n        return machine;\n      })]\n    };\n  }\n\n  return state;\n};","map":{"version":3,"sources":["/Users/chhavikhandelwal/Desktop/Test/Flexcavo/telematic-dashboard/src/store/machine/machine.reducer.ts"],"names":["isType","data","actions","INITIAL_STATE","config","machines","alertedMachines","machineReducer","state","action","updateMachineConfig","payload","updateAlertedMachines","map","machine","id","removeAlertedMachines","addAlertedMachines","updateMachines"],"mappings":"AACA,SAASA,MAAT,QAAuB,gBAAvB;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,OAAO,KAAKC,OAAZ,MAAyB,mBAAzB;AAEA,OAAO,MAAMC,aAAoB,GAAG;AAClCC,EAAAA,MAAM,EAAE,EAD0B;AAElCC,EAAAA,QAAQ,EAAEJ,IAFwB;AAGlCK,EAAAA,eAAe,EAAE;AAHiB,CAA7B;AAMP,OAAO,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAGL,aAAT,EAAwBM,MAAxB,KAA2C;AACvE,MAAIT,MAAM,CAACS,MAAD,EAASP,OAAO,CAACQ,mBAAjB,CAAV,EAAiD;AAC/C,WAAO,EACL,GAAGF,KADE;AAELJ,MAAAA,MAAM,EAAEK,MAAM,CAACE;AAFV,KAAP;AAID;;AAED,MAAIX,MAAM,CAACS,MAAD,EAASP,OAAO,CAACU,qBAAjB,CAAV,EAAmD;AACjD,WAAO,EACL,GAAGJ,KADE;AAELF,MAAAA,eAAe,EAAE,CACf,GAAGE,KAAK,CAACF,eAAN,CAAsBO,GAAtB,CAA2BC,OAAD,IAAa;AACxC,YAAIA,OAAO,CAACC,EAAR,KAAeN,MAAM,CAACE,OAAP,CAAe,CAAf,EAAkBI,EAArC,EAAyC;AACvC,iBAAON,MAAM,CAACE,OAAP,CAAe,CAAf,CAAP;AACD;;AACD,eAAOG,OAAP;AACD,OALE,CADY;AAFZ,KAAP;AAWD;;AAED,MAAId,MAAM,CAACS,MAAD,EAASP,OAAO,CAACc,qBAAjB,CAAV,EAAmD;AACjD,WAAO,EACL,GAAGR,KADE;AAELF,MAAAA,eAAe,EAAE;AAFZ,KAAP;AAID;;AAED,MAAIN,MAAM,CAACS,MAAD,EAASP,OAAO,CAACe,kBAAjB,CAAV,EAAgD;AAC9C,WAAO,EACL,GAAGT,KADE;AAELF,MAAAA,eAAe,EAAE,CAAC,GAAGE,KAAK,CAACF,eAAV,EAA2B,GAAGG,MAAM,CAACE,OAArC;AAFZ,KAAP;AAID;;AAED,MAAIX,MAAM,CAACS,MAAD,EAASP,OAAO,CAACgB,cAAjB,CAAV,EAA4C;AAC1C,WAAO,EACL,GAAGV,KADE;AAELH,MAAAA,QAAQ,EAAE,CACR,GAAGG,KAAK,CAACH,QAAN,CAAeQ,GAAf,CAAoBC,OAAD,IAAa;AACjC,YAAIA,OAAO,CAACC,EAAR,KAAeN,MAAM,CAACE,OAAP,CAAe,CAAf,EAAkBI,EAArC,EAAyC;AACvC,iBAAON,MAAM,CAACE,OAAP,CAAe,CAAf,CAAP;AACD;;AACD,eAAOG,OAAP;AACD,OALE,CADK;AAFL,KAAP;AAWD;;AAED,SAAON,KAAP;AACD,CAnDM","sourcesContent":["import { Action } from 'redux';\nimport { isType } from 'typescript-fsa';\nimport { data } from './data';\nimport * as actions from './machine.actions';\n\nexport const INITIAL_STATE: State = {\n  config: [],\n  machines: data,\n  alertedMachines: [],\n};\n\nexport const machineReducer = (state = INITIAL_STATE, action: Action) => {\n  if (isType(action, actions.updateMachineConfig)) {\n    return {\n      ...state,\n      config: action.payload,\n    };\n  }\n\n  if (isType(action, actions.updateAlertedMachines)) {\n    return {\n      ...state,\n      alertedMachines: [\n        ...state.alertedMachines.map((machine) => {\n          if (machine.id === action.payload[0].id) {\n            return action.payload[0];\n          }\n          return machine;\n        }),\n      ],\n    };\n  }\n\n  if (isType(action, actions.removeAlertedMachines)) {\n    return {\n      ...state,\n      alertedMachines: [],\n    };\n  }\n\n  if (isType(action, actions.addAlertedMachines)) {\n    return {\n      ...state,\n      alertedMachines: [...state.alertedMachines, ...action.payload],\n    };\n  }\n\n  if (isType(action, actions.updateMachines)) {\n    return {\n      ...state,\n      machines: [\n        ...state.machines.map((machine) => {\n          if (machine.id === action.payload[0].id) {\n            return action.payload[0];\n          }\n          return machine;\n        }),\n      ],\n    };\n  }\n\n  return state;\n};\n"]},"metadata":{},"sourceType":"module"}