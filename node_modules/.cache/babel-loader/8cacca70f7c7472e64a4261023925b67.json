{"ast":null,"code":"var _jsxFileName = \"/Users/chhavikhandelwal/Desktop/Test/Flexcavo/telematic-dashboard/src/components/Tile.tsx\",\n    _s = $RefreshSig$();\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getAlertedMachines, getMachineConfig, getMachines } from 'store/machine/machine.selectors';\nimport Table from 'components/Table';\nimport { useEffect, useState } from 'react';\nimport Modal from './Modal';\nimport styled from 'styled-components';\nimport { updateAlertedMachines } from 'store/machine/machine.actions';\nimport MachineBlock from './MachineBlock';\nimport { ALERT } from 'constants/enum';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Tile = () => {\n  _s();\n\n  const [showAlert, setShowAlert] = useState(false);\n  const [pageNumber, setPageNumber] = useState(1);\n  const alertedMachines = useSelector(getAlertedMachines);\n  const machineConfig = useSelector(getMachineConfig);\n  const machines = useSelector(getMachines);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    console.log(machineConfig, showAlert, alertedMachines);\n\n    if (!showAlert && alertedMachines.length) {\n      const alertedMachine = alertedMachines.filter(mc => {\n        const idleHours = mc.cumulativeIdleHours.hour;\n        const operatingHours = mc.cumulativeOperatingHours.hour;\n\n        if (operatingHours / idleHours < 3) {\n          mc.alert = ALERT.IDLE;\n          return mc;\n        }\n\n        const fuelRemaining = mc.fuelRemaining.percent;\n\n        if (fuelRemaining < 5) {\n          mc.alert = ALERT.FUEL_LIMIT;\n          return mc;\n        }\n\n        if (idleHours < 5 || operatingHours < 5) {\n          mc.alert = ALERT.WEEKEND_OFF;\n          return mc;\n        }\n\n        const engineStatus = mc.engineStatus.running;\n\n        if (!engineStatus) {\n          mc.alert = ALERT.ENGINE_FAILED;\n          return mc;\n        }\n\n        return false;\n      });\n\n      if (alertedMachine.length) {\n        dispatch(updateAlertedMachines(alertedMachine));\n        setShowAlert(true);\n      }\n    }\n  }, [machineConfig, showAlert, alertedMachines]);\n  return /*#__PURE__*/_jsxDEV(Styled.Dashboard, {\n    children: [showAlert && (alertedMachines === null || alertedMachines === void 0 ? void 0 : alertedMachines.length) && /*#__PURE__*/_jsxDEV(Modal, {\n      onClose: () => {\n        setShowAlert(false);\n        dispatch(updateAlertedMachines([]));\n      },\n      children: /*#__PURE__*/_jsxDEV(Styled.Container, {\n        children: /*#__PURE__*/_jsxDEV(MachineBlock, {\n          alertedMachine: alertedMachines[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      data: machines,\n      setPageNumber: setPageNumber\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Tile, \"a3GViosgrq8McEb9VH9UB7/4kD4=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = Tile;\nconst Styled = {\n  Dashboard: styled.div`\n    padding: ${props => props.theme.spacings.xl};\n  `,\n  Container: styled.div`\n    background-color: ${props => props.theme.colors.white};\n    display: flex;\n    align-items: flex-start;\n    justify-content: center;\n    flex-direction: column;\n  `\n};\nexport default Tile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tile\");","map":{"version":3,"sources":["/Users/chhavikhandelwal/Desktop/Test/Flexcavo/telematic-dashboard/src/components/Tile.tsx"],"names":["useDispatch","useSelector","getAlertedMachines","getMachineConfig","getMachines","Table","useEffect","useState","Modal","styled","updateAlertedMachines","MachineBlock","ALERT","Tile","showAlert","setShowAlert","pageNumber","setPageNumber","alertedMachines","machineConfig","machines","dispatch","console","log","length","alertedMachine","filter","mc","idleHours","cumulativeIdleHours","hour","operatingHours","cumulativeOperatingHours","alert","IDLE","fuelRemaining","percent","FUEL_LIMIT","WEEKEND_OFF","engineStatus","running","ENGINE_FAILED","Styled","Dashboard","div","props","theme","spacings","xl","Container","colors","white"],"mappings":"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","sourcesContent":["import { useDispatch, useSelector } from 'react-redux';\nimport {\n  getAlertedMachines,\n  getMachineConfig,\n  getMachines,\n} from 'store/machine/machine.selectors';\nimport Table from 'components/Table';\nimport { useEffect, useState } from 'react';\nimport Modal from './Modal';\nimport styled from 'styled-components';\nimport {\n  updateMachineConfig,\n  updateAlertedMachines,\n} from 'store/machine/machine.actions';\nimport MachineBlock from './MachineBlock';\nimport { ALERT } from 'constants/enum';\n\nconst Tile = () => {\n  const [showAlert, setShowAlert] = useState<boolean>(false);\n  const [pageNumber, setPageNumber] = useState<number>(1);\n\n  const alertedMachines = useSelector(getAlertedMachines);\n  const machineConfig = useSelector(getMachineConfig);\n  const machines = useSelector(getMachines);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    console.log(machineConfig, showAlert, alertedMachines);\n    if (!showAlert && alertedMachines.length) {\n      const alertedMachine = alertedMachines.filter((mc) => {\n        const idleHours = mc.cumulativeIdleHours.hour;\n        const operatingHours = mc.cumulativeOperatingHours.hour;\n        if (operatingHours / idleHours < 3) {\n          mc.alert = ALERT.IDLE;\n          return mc;\n        }\n        const fuelRemaining = mc.fuelRemaining.percent;\n\n        if (fuelRemaining < 5) {\n          mc.alert = ALERT.FUEL_LIMIT;\n          return mc;\n        }\n\n        if (idleHours < 5 || operatingHours < 5) {\n          mc.alert = ALERT.WEEKEND_OFF;\n          return mc;\n        }\n        const engineStatus = mc.engineStatus.running;\n\n        if (!engineStatus) {\n          mc.alert = ALERT.ENGINE_FAILED;\n          return mc;\n        }\n        return false;\n      });\n      if (alertedMachine.length) {\n        dispatch(updateAlertedMachines(alertedMachine));\n        setShowAlert(true);\n      }\n    }\n  }, [machineConfig, showAlert, alertedMachines]);\n\n  return (\n    <Styled.Dashboard>\n      {showAlert && alertedMachines?.length && (\n        <Modal\n          onClose={() => {\n            setShowAlert(false);\n            dispatch(updateAlertedMachines([]));\n          }}\n        >\n          <Styled.Container>\n            <MachineBlock alertedMachine={alertedMachines[0]} />\n          </Styled.Container>\n        </Modal>\n      )}\n      <Table data={machines} setPageNumber={setPageNumber} />\n    </Styled.Dashboard>\n  );\n};\n\nconst Styled = {\n  Dashboard: styled.div`\n    padding: ${(props) => props.theme.spacings.xl};\n  `,\n  Container: styled.div`\n    background-color: ${(props) => props.theme.colors.white};\n    display: flex;\n    align-items: flex-start;\n    justify-content: center;\n    flex-direction: column;\n  `,\n};\n\nexport default Tile;\n"]},"metadata":{},"sourceType":"module"}